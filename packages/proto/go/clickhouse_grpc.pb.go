// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: clickhouse.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClickHouseService_HealthCheck_FullMethodName        = "/clickhouse.ClickHouseService/HealthCheck"
	ClickHouseService_GetRetailers_FullMethodName       = "/clickhouse.ClickHouseService/GetRetailers"
	ClickHouseService_GetRetailersStream_FullMethodName = "/clickhouse.ClickHouseService/GetRetailersStream"
)

// ClickHouseServiceClient is the client API for ClickHouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClickHouseServiceClient interface {
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Retailers operations
	GetRetailers(ctx context.Context, in *GetRetailersRequest, opts ...grpc.CallOption) (*GetRetailersResponse, error)
	GetRetailersStream(ctx context.Context, in *GetRetailersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RetailerStreamResponse], error)
}

type clickHouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClickHouseServiceClient(cc grpc.ClientConnInterface) ClickHouseServiceClient {
	return &clickHouseServiceClient{cc}
}

func (c *clickHouseServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, ClickHouseService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickHouseServiceClient) GetRetailers(ctx context.Context, in *GetRetailersRequest, opts ...grpc.CallOption) (*GetRetailersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRetailersResponse)
	err := c.cc.Invoke(ctx, ClickHouseService_GetRetailers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickHouseServiceClient) GetRetailersStream(ctx context.Context, in *GetRetailersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RetailerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClickHouseService_ServiceDesc.Streams[0], ClickHouseService_GetRetailersStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRetailersRequest, RetailerStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClickHouseService_GetRetailersStreamClient = grpc.ServerStreamingClient[RetailerStreamResponse]

// ClickHouseServiceServer is the server API for ClickHouseService service.
// All implementations must embed UnimplementedClickHouseServiceServer
// for forward compatibility.
type ClickHouseServiceServer interface {
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Retailers operations
	GetRetailers(context.Context, *GetRetailersRequest) (*GetRetailersResponse, error)
	GetRetailersStream(*GetRetailersRequest, grpc.ServerStreamingServer[RetailerStreamResponse]) error
	mustEmbedUnimplementedClickHouseServiceServer()
}

// UnimplementedClickHouseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClickHouseServiceServer struct{}

func (UnimplementedClickHouseServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedClickHouseServiceServer) GetRetailers(context.Context, *GetRetailersRequest) (*GetRetailersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetailers not implemented")
}
func (UnimplementedClickHouseServiceServer) GetRetailersStream(*GetRetailersRequest, grpc.ServerStreamingServer[RetailerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetRetailersStream not implemented")
}
func (UnimplementedClickHouseServiceServer) mustEmbedUnimplementedClickHouseServiceServer() {}
func (UnimplementedClickHouseServiceServer) testEmbeddedByValue()                           {}

// UnsafeClickHouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClickHouseServiceServer will
// result in compilation errors.
type UnsafeClickHouseServiceServer interface {
	mustEmbedUnimplementedClickHouseServiceServer()
}

func RegisterClickHouseServiceServer(s grpc.ServiceRegistrar, srv ClickHouseServiceServer) {
	// If the following call pancis, it indicates UnimplementedClickHouseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClickHouseService_ServiceDesc, srv)
}

func _ClickHouseService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickHouseServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClickHouseService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickHouseServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickHouseService_GetRetailers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetailersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickHouseServiceServer).GetRetailers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClickHouseService_GetRetailers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickHouseServiceServer).GetRetailers(ctx, req.(*GetRetailersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickHouseService_GetRetailersStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRetailersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClickHouseServiceServer).GetRetailersStream(m, &grpc.GenericServerStream[GetRetailersRequest, RetailerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClickHouseService_GetRetailersStreamServer = grpc.ServerStreamingServer[RetailerStreamResponse]

// ClickHouseService_ServiceDesc is the grpc.ServiceDesc for ClickHouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClickHouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clickhouse.ClickHouseService",
	HandlerType: (*ClickHouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ClickHouseService_HealthCheck_Handler,
		},
		{
			MethodName: "GetRetailers",
			Handler:    _ClickHouseService_GetRetailers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRetailersStream",
			Handler:       _ClickHouseService_GetRetailersStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clickhouse.proto",
}
